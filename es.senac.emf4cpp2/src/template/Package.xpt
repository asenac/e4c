«IMPORT org::eclipse::emf::ecore»

«EXTENSION template::FQN»
«EXTENSION template::Queries»

«DEFINE packageHeader FOR EPackage»
«FILE getFQN("/") + "/" + getPackage() + ".hpp"-»
#ifndef «getHeader("PACKAGE")»
#define «getHeader("PACKAGE")»

#include <e4c/tag.hpp>
#include <ecore/EPackage.hpp>
#include <«getFQN("/")»/fwd.hpp>

«EXPAND template::EPackage::namespacesBegin FOR this»

class «getPackage()» : public ::ecore::EPackage
{
public:
    static const «getPackage()»_ptr _instance();
 
 	// Classifiers
  	«FOREACH EClassifiers AS e-»
 	e4c::tag_t «e.getTagMethod()»() const;
 	«ENDFOREACH-»
 
 	// Structural features
 	«FOREACH getStructuralFeatures() AS e-»
 	e4c::tag_t «e.getTagMethod()»() const;
 	«ENDFOREACH-»

protected:
    «getPackage()»();
};

«EXPAND template::EPackage::namespacesEnd FOR this»

#endif // «getHeader("PACKAGE")»
«ENDFILE»
«ENDDEFINE»

«DEFINE packageImpl FOR EPackage»
«FILE getFQN("/") + "/" + getPackage() + ".cpp"-»
#include "«getPackage()».hpp"
#include "«getFactory()».hpp"
#include "include.hpp"
#include <ecore/include.hpp>
#include <e4c/tag.ipp>

using namespace «getFQN()»;

«getPackage()»::«getPackage()»()
{
	m_eFactoryInstance = «getFactory()»::_instance();
	«IF !eContents().isEmpty-»
	::ecore::EcoreFactory_ptr ecoreFactory = ::ecore::EcoreFactory::_instance();
	«ENDIF-»
	
	«FOREACH EClassifiers.typeSelect(EClass) AS cl-»
	::ecore::EClass_ptr «cl.getName()»_ = ecoreFactory->createEClass();
	«cl.getName()»_->setName("«cl.name»");
	addEClassifiers(«cl.getName()»_);
	«ENDFOREACH»
	
	«FOREACH EClassifiers.typeSelect(EClass) AS cl-»
		«FOREACH cl.ESuperTypes AS s-»
	// «cl.getName()»_->addESuperTypes(«s.getName()»_);
		«ENDFOREACH-»
	«ENDFOREACH»
	
	«FOREACH EClassifiers.typeSelect(EDataType).select(e|!EEnum.isInstance(e)) AS cl-»
	::ecore::EDataType_ptr «cl.getName()»_ = ecoreFactory->createEDataType();
	«cl.getName()»_->setName("«cl.name»");
	addEClassifiers(«cl.getName()»_);
	«ENDFOREACH»
	
	«FOREACH EClassifiers.typeSelect(EEnum) AS ee-»
    ::ecore::EEnum_ptr «ee.getName()»_ = ecoreFactory->createEEnum();
    «ee.getName()»_->setName("«ee.name»");
    «ee.getName()»_->setSerializable(«ee.serializable»);
	    «FOREACH ee.ELiterals AS el-»
    {
        ::ecore::EEnumLiteral_ptr el = ecoreFactory->createEEnumLiteral();
        el->setName("«el»");
        el->setValue(static_cast< ::ecore::EInt >(«ee.getName()»::«el»));
        el->setLiteral("«el»");
        «ee.getName()»_->addELiterals(el);
    }
	    «ENDFOREACH-»
	addEClassifiers(«ee.getName()»_);
	«ENDFOREACH-»
}

const «getPackage()»_ptr «getPackage()»::_instance()
{
	static «getPackage()» __instance;
	return &__instance;
}

  	«FOREACH EClassifiers AS e-»
e4c::tag_t «getPackage()»::«e.getTagMethod()»() const
{
	return e4c::tag< «e.getName()» >::get();
}
 
 	«ENDFOREACH-»
 	«FOREACH getStructuralFeatures() AS e-»
e4c::tag_t «getPackage()»::«e.getTagMethod()»() const
{
	return e4c::tag< «e.getTagName()» >::get();
}

 	«ENDFOREACH-»

extern "C" ::ecore::EPackage_ptr e4c_«getFQN("_")»()
{
	return ::«getFQN()»::«getPackage()»::_instance();
}
«ENDFILE»
«ENDDEFINE»
