«IMPORT org::eclipse::emf::ecore»

«EXTENSION template::FQN»
«EXTENSION template::Queries»

«REM»Header«ENDREM»

«DEFINE generateHeader FOR EClass-»
«FILE getFilePrefix() + ".hpp"»
#ifndef «getHeader()»
#define «getHeader()»

#include <«EPackage.getFwdFile()»>
#include <«EPackage.getMetaFile()»>
«FOREACH ESuperTypes AS e-»
#include <«e.getFilePrefix()».hpp>
«ENDFOREACH-»
«IF ESuperTypes.isEmpty && getFQN() != "ecore::EObject"-»
#include <ecore/EObject.hpp>
«ENDIF-»

#include <e4c/mapping.hpp>

«EXPAND template::EPackage::namespacesBegin FOR EPackage»

// «getFQN()»
class «getName()»«IF !ESuperTypes.isEmpty» : «FOREACH ESuperTypes AS e SEPARATOR ", "» public virtual ::«e.getFQN()»«ENDFOREACH»«ENDIF»
{
public:

	typedef «name»_ptr ptr_type;
	
«IF !abstract-»
	«getName()»();
«ENDIF-»
	virtual ~«getName()»();

	«EXPAND generateTypedef FOREACH EStructuralFeatures»
	
	«EXPAND generateAccessors FOREACH EStructuralFeatures»
	
protected:
«IF abstract-»
	«getName()»();
«ENDIF-»

	«EXPAND generateDecl FOREACH EStructuralFeatures»
};

«EXPAND template::EPackage::namespacesEnd FOR EPackage»

#endif // «getHeader()»
«ENDFILE»
«ENDDEFINE»

«REM»Typedef«ENDREM»
«DEFINE generateTypedef FOR EStructuralFeature»«ENDDEFINE»

«DEFINE generateTypedef FOR EAttribute-»
	typedef int «getName()»_t;
«ENDDEFINE»

«DEFINE generateTypedef FOR EReference-»
	typedef «getReferenceType()» «getName()»_t;
«ENDDEFINE»

«DEFINE generateDecl FOR EStructuralFeature-»
	«getName()»_t m_«getName()»;
«ENDDEFINE»

«REM»Accessors«ENDREM»
«DEFINE generateAccessors FOR EStructuralFeature»«ENDDEFINE»

«DEFINE generateAccessors FOR EAttribute-»
	void set«getName().toFirstUpper()»(«getName()»_t _«getName()»);
	«getName()»_t get«getName().toFirstUpper()»() const;
«ENDDEFINE»

«DEFINE generateAccessors FOR EReference-»
	// TODO
«ENDDEFINE»

«DEFINE generateAccessorsImpl FOR EStructuralFeature»«ENDDEFINE»

«DEFINE generateAccessorsImpl FOR EAttribute-»
void «EContainingClass.getName()»::set«getName().toFirstUpper()»(«getName()»_t _«getName()»)
{
	m_«getName()» = _«getName()»;;
}

«getName()»_t «EContainingClass.getName()»::get«getName().toFirstUpper()»() const
{
	return m_«getName()»;
}

«ENDDEFINE»

«DEFINE generateAccessorsImpl FOR EReference-»
«ENDDEFINE»

«REM»Impl«ENDREM»

«DEFINE generateImpl FOR EClass-»
«FILE getFilePrefix() + ".cpp"»
#include "«getName()».hpp"
«FOREACH EStructuralFeatures.typeSelect(EReference).EReferenceType.toSet() AS e-»
#include <«e.getFilePrefix()».hpp>
«ENDFOREACH-»

using namespace «EPackage.getFQN()»;

«getName()»::«getName()»()«IF !EStructuralFeatures.isEmpty-» : 
	«FOREACH EStructuralFeatures AS e SEPARATOR ",\n    "»m_«e.getName()»()«ENDFOREACH»«ENDIF»
{
}

«getName()»::~«getName()»()
{
}

«EXPAND generateAccessorsImpl FOREACH EStructuralFeatures»

«ENDFILE»
«ENDDEFINE»
