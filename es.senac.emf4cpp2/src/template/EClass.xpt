«IMPORT org::eclipse::emf::ecore»

«EXTENSION template::FQN»
«EXTENSION template::Queries»

«REM»Header«ENDREM»

«DEFINE generateHeader FOR EClass-»
«FILE getFilePrefix() + ".hpp"-»
#ifndef «getHeader()»
#define «getHeader()»

#include <«EPackage.getFwdFile()»>
#include <«EPackage.getMetaFile()»>
«FOREACH ESuperTypes AS e-»
#include <«e.getFilePrefix()».hpp>
«ENDFOREACH-»
«IF inheritFormEObject()-»
#include <ecore/EObject.hpp>
«ENDIF-»

#include <e4c/mapping.hpp>

«EXPAND template::EPackage::namespacesBegin FOR EPackage»

class «getName()»«IF !ESuperTypes.isEmpty» : «FOREACH ESuperTypes AS e SEPARATOR ", "» public virtual ::«e.getFQN()»«ENDFOREACH»«ENDIF»«IF inheritFormEObject()-» : ::ecore::EObject«ENDIF»
{
public:

    typedef «name»_ptr ptr_type;

«IF !abstract-»
    «getName()»();
«ENDIF-»
    virtual ~«getName()»();

    «EXPAND generateTypedef FOREACH EStructuralFeatures-»

    «EXPAND generateAccessors FOREACH EStructuralFeatures-»

    «FOREACH EOperations AS o-»
    «o.getSignature(false)»;
    «ENDFOREACH-»

    «PROTECT CSTART '/*' CEND '*/' ID getFQN() + " public" DISABLE»
    «ENDPROTECT»

protected:
«IF abstract-»
    «getName()»();
«ENDIF-»

    friend class «EPackage.getPackage()»;

    «EXPAND generateDecl FOREACH EStructuralFeatures»

    «FOREACH EReferences.select(e|e.container) AS e-»
        «IF e.EType != this-»
    friend class ::«e.EType.getFQN()»;
        «ENDIF-»
    void set«e.getNameUpper()»(«e.getName()»_t «e.getName()»_);
    «ENDFOREACH-»

    «REM»EObject stuff«ENDREM»
    virtual «eClass().eClass().getFQN()»_ptr eClassImpl() const;

    «PROTECT CSTART '/*' CEND '*/' ID getFQN() + " protected" DISABLE»
    «ENDPROTECT»
};

«EXPAND template::EPackage::namespacesEnd FOR EPackage»

#endif // «getHeader()»
«ENDFILE»
«ENDDEFINE»

«REM»Typedef«ENDREM»
«DEFINE generateTypedef FOR EStructuralFeature»«ENDDEFINE»

«DEFINE generateTypedef FOR EAttribute-»
    typedef ::«EType.getFQN()» «getName()»_t;
«ENDDEFINE»

«DEFINE generateTypedef FOR EReference-»
    typedef «getNoContaimentType()» «getName()»_t;
«ENDDEFINE»

«DEFINE generateDecl FOR EStructuralFeature-»
    «getName()»_t m_«getName()»;
«ENDDEFINE»

«DEFINE generateDecl FOR EReference-»
    «getReferenceType()» m_«getName()»;
«ENDDEFINE»

«REM»Accessors«ENDREM»
«DEFINE generateAccessors FOR EStructuralFeature»«ENDDEFINE»

«DEFINE generateAccessors FOR EAttribute-»
    void set«getNameUpper()»(«getName()»_t _«getName()»);
    «getName()»_t get«getNameUpper()»() const;
«ENDDEFINE»

«DEFINE generateAccessors FOR EReference-»
    «getName()»_t get«getNameUpper()»() const;
    «IF upperBound != 1-»
    void add«getNameUpper()»(«getNoContaimentPtr()» «getName()»_);
    void addAll«getNameUpper()»(const «getName()»_t& «getName()»_);
    void remove«getNameUpper()»(«getNoContaimentPtr()» «getName()»_);
    void clear«getNameUpper()»();
    «ENDIF-»
    «IF containment-»
        «IF upperBound == 1-»
    void set«getNameUpper()»(«getName()»_t «getName()»_);
    «getName()»_t release«getNameUpper()»();
        «ELSEIF ordered-»
        «ELSE-»
        «ENDIF-»
    «ELSEIF !container-»
        «IF upperBound == 1-»
    void set«getNameUpper()»(«getName()»_t «getName()»_);
        «ELSEIF ordered-»
        «ELSE-»
        «ENDIF-»
    «ENDIF-»
«ENDDEFINE»

«DEFINE generateAccessorsImpl FOR EStructuralFeature»«ENDDEFINE»

«DEFINE generateAccessorsImpl FOR EAttribute-»
void «EContainingClass.getName()»::set«getNameUpper()»(«getName()»_t _«getName()»)
{
    m_«getName()» = _«getName()»;;
}

«EContainingClass.getName()»::«getName()»_t «EContainingClass.getName()»::get«getNameUpper()»() const
{
    return m_«getName()»;
}

«ENDDEFINE»

«DEFINE generateAccessorsImpl FOR EReference-»
«EContainingClass.getName()»::«getName()»_t «EContainingClass.getName()»::get«getNameUpper()»() const
{
    return e4c::returned(m_«getName()»);
}
«IF containment-»
    «IF upperBound == 1-»«REM»Required upperBound == 1«ENDREM»
void «EContainingClass.getName()»::set«getNameUpper()»(«getName()»_t «getName()»_)
{
    m_«getName()».reset(«getName()»_);
        «IF EOpposite != null-»
    m_«getName()»->set«EOpposite.getNameUpper()»(this);
        «ENDIF-»
}

«EContainingClass.getName()»::«getName()»_t «EContainingClass.getName()»::release«getNameUpper()»()
{
        «IF EOpposite != null-»
    m_«getName()»->set«EOpposite.getNameUpper()»(0);
        «ENDIF-»
    return m_«getName()».release();
}
    «ELSE-»«REM»Required EOpposite.upperBound == 1«ENDREM»
void «EContainingClass.getName()»::add«getNameUpper()»(«getNoContaimentPtr()» «getName()»_)
{
    assert(«getName()»_);
        «IF EOpposite != null-»
    «getName()»_->set«EOpposite.getNameUpper()»(this);
        «ENDIF-»
    m_«getName()».«getInsertMethod()»(«getContaimentPtr()»(«getName()»_));
}

void «EContainingClass.getName()»::addAll«getNameUpper()»(const «getName()»_t& «getName()»_)
{
    for (auto i = «getName()»_.begin(); i != «getName()»_.end(); i++)
        add«getNameUpper()»(*i);
}

void «EContainingClass.getName()»::remove«getNameUpper()»(«getNoContaimentPtr()» «getName()»_)
{
    assert(«getName()»_);
    e4c::remove(m_«getName()», «getName()»_);
}

void «EContainingClass.getName()»::clear«getNameUpper()»()
{
    m_«getName()».clear();
}
    «ENDIF-»
«ELSEIF container-»«REM»Protected method«ENDREM-»
void «EContainingClass.getName()»::set«getNameUpper()»(«getName()»_t «getName()»_)
{
    m_«getName()» = «getName()»_;
}
«ELSE-»
    «IF upperBound == 1-»
void «EContainingClass.getName()»::set«getNameUpper()»(«getName()»_t «getName()»_)
{
    if (m_«getName()» == «getName()»_)
        return;
        «IF EOpposite != null && EOpposite.upperBound == 1-»
    if (m_«getName()»)
        m_«getName()»->set«EOpposite.getNameUpper()»(0);
        «ELSEIF EOpposite != null-»
    if (m_«getName()»)
        m_«getName()»->remove«EOpposite.getNameUpper()»(this);
        «ENDIF-»
    m_«getName()» = «getName()»_;
        «IF EOpposite != null && EOpposite.upperBound == 1-»
    if (m_«getName()»)
        m_«getName()»->set«EOpposite.getNameUpper()»(this);
        «ELSEIF EOpposite != null-»
    if (m_«getName()»)
        m_«getName()»->add«EOpposite.getNameUpper()»(this);
        «ENDIF-»
}
    «ELSE-»
void «EContainingClass.getName()»::add«getNameUpper()»(«getNoContaimentPtr()» «getName()»_)
{
    assert(«getName()»_);
    if (e4c::contains(m_«getName()», «getName()»_))
        return;
    m_«getName()».«getInsertMethod()»(«getName()»_);
        «IF EOpposite != null && EOpposite.upperBound == 1-»
    «getName()»_->set«EOpposite.getNameUpper()»(this);
        «ELSEIF EOpposite != null-»
    «getName()»_->add«EOpposite.getNameUpper()»(this);
        «ENDIF-»
}

void «EContainingClass.getName()»::addAll«getNameUpper()»(const «getName()»_t& «getName()»_)
{
    for (auto i = «getName()»_.begin(); i != «getName()»_.end(); i++)
        add«getNameUpper()»(*i);
}

void «EContainingClass.getName()»::remove«getNameUpper()»(«getNoContaimentPtr()» «getName()»_)
{
    assert(«getName()»_);
        «IF EOpposite != null && EOpposite.upperBound == 1-»
    if (e4c::remove(m_«getName()», «getName()»_))
        «getName()»_->set«EOpposite.getNameUpper()»(0);
        «ELSEIF EOpposite != null-»
    if (e4c::remove(m_«getName()», «getName()»_))
        «getName()»_->remove«EOpposite.getNameUpper()»(this);
        «ELSE-»
    e4c::remove(m_«getName()», «getName()»_);
        «ENDIF-»
}

void «EContainingClass.getName()»::clear«getNameUpper()»()
{
    «IF EOpposite != null-»
    const «getName()»_t old(std::move(m_«getName()»));
    for (auto i = old.begin(); i != old.end(); ++i) {
        «IF EOpposite.upperBound == 1-»
        (*i)->set«EOpposite.getNameUpper()»(0);
        «ELSE-»
        (*i)->remove«EOpposite.getNameUpper()»(this);
        «ENDIF-»
    }
    «ELSE-»
    m_«getName()».clear();
    «ENDIF-»
}
    «ENDIF-»
«ENDIF-»

«ENDDEFINE»

«REM»Impl«ENDREM»

«DEFINE generateImpl FOR EClass-»
«FILE getFilePrefix() + ".cpp"-»
#include "«getName()».hpp"
#include <«EPackage.getFilePrefix()»/«EPackage.getPackage()».hpp>
«FOREACH EStructuralFeatures.typeSelect(EReference).EReferenceType.toSet() AS e-»
#include <«e.getFilePrefix()».hpp>
«ENDFOREACH-»

using namespace «EPackage.getFQN()»;

«PROTECT CSTART '/*' CEND '*/' ID getFQN() + " include" DISABLE»
«ENDPROTECT»

«getName()»::«getName()»()«IF !EStructuralFeatures.isEmpty-» :
    «FOREACH EStructuralFeatures AS e SEPARATOR ",\n    "»m_«e.getName()»()«ENDFOREACH»«ENDIF»
{
    «PROTECT CSTART '/*' CEND '*/' ID getName() + " constructor" DISABLE»
    «ENDPROTECT»
}

«getName()»::~«getName()»()
{
    «PROTECT CSTART '/*' CEND '*/' ID getName() + " destructor" DISABLE»
    «ENDPROTECT»
}

«EXPAND generateAccessorsImpl FOREACH EStructuralFeatures-»

«FOREACH EOperations AS o-»
«o.getSignature(true)»
{
    «PROTECT CSTART '/*' CEND '*/' ID o.getProtectedRegion() DISABLE»
    «IF o.EType != null-»
    return «o.getType()»();
    «ENDIF-»
    «ENDPROTECT»
}

«ENDFOREACH-»

«PROTECT CSTART '/*' CEND '*/' ID getFQN() + " implementation" DISABLE»
«ENDPROTECT»

«eClass().eClass().getFQN()»_ptr «getName()»::eClassImpl() const
{
    return «EPackage.getPackage()»::_instance()->get«getName()»();
}

«ENDFILE»
«ENDDEFINE»
